import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';
import { listingService } from '../services/listingService';
import { logger } from '../utils/logger';
import { reverseGeocode } from '../services/geocodingService';
import {
  createListingSchema,
  updateListingSchema,
  listingQuerySchema,
  listingIdParamSchema,
} from '../schemas/listingSchema';
import { getImageUrl } from '../utils/fileUpload';
import { imageService } from '../services/imageService';

const prisma = new PrismaClient();

export const listingController = {
  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
   */
  async createListing(req: Request, res: Response): Promise<void> {
    try {
      logger.info('=== –ü–û–ß–ê–¢–û–ö –°–¢–í–û–†–ï–ù–ù–Ø –û–ì–û–õ–û–®–ï–ù–ù–Ø ===');
      logger.info('HTTP Method:', req.method);
      logger.info('URL:', req.originalUrl);
      logger.info('Headers:', JSON.stringify(req.headers, null, 2));
      logger.info('Raw Body:', JSON.stringify(req.body, null, 2));
      logger.info('Files:', req.files ? (req.files as Express.Multer.File[]).map(f => ({ 
        fieldname: f.fieldname, 
        originalname: f.originalname, 
        filename: f.filename,
        size: f.size
      })) : 'No files');

      // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É
      if (!req.body || Object.keys(req.body).length === 0) {
        logger.warn('‚ùå –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä–æ–∂–Ω—î —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É');
        res.status(400).json({
          status: 'error',
          message: '–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
        });
        return;
      }

      // 2. –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ JWT —Ç–æ–∫–µ–Ω–∞
      const userId = req.userId ?? (req as any).user?.id;
      if (!userId) {
        logger.warn('–°–ø—Ä–æ–±–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó');
        res.status(401).json({
          status: 'error',
          message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π',
        });
        return;
      }

      // –õ–æ–≥—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ñ–∞–π–ª–∏
      const uploadedFiles = req.files as Express.Multer.File[];
      logger.info(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${uploadedFiles?.length || 0} —Ñ–∞–π–ª—ñ–≤`);

      // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —à–ª—è—Ö–∏ –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤ —É URL
      const images = uploadedFiles
        ? uploadedFiles.map((file) => getImageUrl(file.filename))
        : [];

      // --- –û–±—Ä–æ–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó —Ç–∞ –ª–æ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É ---
      let { location, mapLocation, userGeolocation, ...rest } = req.body;
      
      logger.info('üìç –û–¢–†–ò–ú–ê–ù–Ü –î–ê–ù–Ü –ì–ï–û–õ–û–ö–ê–¶–Ü–á:');
      logger.info('location:', JSON.stringify(location, null, 2));
      logger.info('mapLocation:', JSON.stringify(mapLocation, null, 2));
      logger.info('userGeolocation:', JSON.stringify(userGeolocation, null, 2));
      logger.info('rest (—ñ–Ω—à—ñ –ø–æ–ª—è):', Object.keys(rest));
      
      // –ü–∞—Ä—Å–∏–º–æ location, —è–∫—â–æ –≤—ñ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —è–∫ —Ä—è–¥–æ–∫
      if (typeof location === 'string') {
        try {
          logger.info('üîÑ –ü–∞—Ä—Å–∏–Ω–≥ location –∑ —Ä—è–¥–∫–∞...');
          location = JSON.parse(location);
          logger.info('‚úÖ Location —É—Å–ø—ñ—à–Ω–æ –ø–∞—Ä—Å–µ–Ω–æ:', JSON.stringify(location, null, 2));
        } catch (e) {
          logger.warn('‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç location:', e);
          location = undefined;
        }
      }

      // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É:
      // 1. –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ –∫–∞—Ä—Ç–∏ (—è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ –º—ñ—Å—Ü–µ –Ω–∞ –∫–∞—Ä—Ç—ñ)
      // 2. –Ø–∫—â–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –º—ñ—Å—Ü–µ –Ω–∞ –∫–∞—Ä—Ç—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      let finalLatitude: number | undefined;
      let finalLongitude: number | undefined;
      let useUserGeolocation = false;

      logger.info('üéØ –í–ò–ó–ù–ê–ß–ï–ù–ù–Ø –ö–û–û–†–î–ò–ù–ê–¢:');

      // –Ø–∫—â–æ —î –¥–∞–Ω—ñ –∑ –∫–∞—Ä—Ç–∏ OpenStreetMap - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
      if (mapLocation) {
        logger.info('üó∫Ô∏è –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –∑ –∫–∞—Ä—Ç–∏...');
        try {
          const mapLocationData =
            typeof mapLocation === 'string'
              ? JSON.parse(mapLocation)
              : mapLocation;

          logger.info('mapLocationData –ø—ñ—Å–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É:', JSON.stringify(mapLocationData, null, 2));

          if (mapLocationData.lat && mapLocationData.lon) {
            finalLatitude = Number(mapLocationData.lat);
            finalLongitude = Number(mapLocationData.lon);
            
            logger.info(`‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ –∫–∞—Ä—Ç–∏: (${finalLatitude}, ${finalLongitude})`);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –¥–æ–ø–æ–≤–Ω—é—î–º–æ –ª–æ–∫–∞—Ü—ñ—é –¥–∞–Ω–∏–º–∏ –∑ OSM
            location = location || {};
            location.settlement =
              mapLocationData.name ||
              (mapLocationData.display_name &&
                mapLocationData.display_name.split(',')[0]) ||
              location.settlement ||
              '';

            location.latitude = finalLatitude;
            location.longitude = finalLongitude;

            // –î–æ–¥–∞—î–º–æ OSM —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ–ª—è
            location.osmId = mapLocationData.osm_id
              ? Number(mapLocationData.osm_id)
              : undefined;
            location.osmType = mapLocationData.osm_type;
            location.placeId = mapLocationData.place_id
              ? Number(mapLocationData.place_id)
              : undefined;
            location.displayName = mapLocationData.display_name;
            location.addressType = mapLocationData.addresstype;

            // –î–æ–¥–∞—î–º–æ boundingBox —è–∫ –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤
            if (
              mapLocationData.boundingbox &&
              Array.isArray(mapLocationData.boundingbox)
            ) {
              location.boundingBox = mapLocationData.boundingbox;
            }

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ OSM
            location.osmJsonData = mapLocationData;

            // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–≥—ñ–æ–Ω —ñ —Ä–∞–π–æ–Ω –∑ –∞–¥—Ä–µ—Å–∏ OSM
            if (mapLocationData.address) {
              location.region = mapLocationData.address.state || location.region || '';
              location.district =
                mapLocationData.address.district ||
                mapLocationData.address.county ||
                location.district ||
                '';
            }

            logger.info('üìç –õ–æ–∫–∞—Ü—ñ—è –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ –∫–∞—Ä—Ç–∏:', JSON.stringify(location, null, 2));
          } else {
            logger.warn('‚ùå mapLocation –Ω–µ –º—ñ—Å—Ç–∏—Ç—å lat/lon');
          }
        } catch (e) {
          logger.warn('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑ –∫–∞—Ä—Ç–∏:', e);
        }
      }

      // –Ø–∫—â–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —â–µ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ —ñ —î –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó
      if (!finalLatitude && !finalLongitude && userGeolocation && 
          userGeolocation.latitude && userGeolocation.longitude) {
        logger.info('üë§ –û–±—Ä–æ–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
        logger.info('userGeolocation:', JSON.stringify(userGeolocation, null, 2));
        
        finalLatitude = parseFloat(userGeolocation.latitude);
        finalLongitude = parseFloat(userGeolocation.longitude);
        useUserGeolocation = true;
        
        logger.info(`‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: (${finalLatitude}, ${finalLongitude})`);
        
        // –Ø–∫—â–æ location –Ω–µ –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –∑ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (!location) {
          location = {};
        }
        location.latitude = finalLatitude;
        location.longitude = finalLongitude;
        
        logger.info('üìç –õ–æ–∫–∞—Ü—ñ—è –ø—ñ—Å–ª—è –æ–±—Ä–æ–±–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', JSON.stringify(location, null, 2));
      }

      logger.info(`üéØ –§–Ü–ù–ê–õ–¨–ù–Ü –ö–û–û–†–î–ò–ù–ê–¢–ò: (${finalLatitude}, ${finalLongitude}), –¥–∂–µ—Ä–µ–ª–æ: ${useUserGeolocation ? '–≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' : '–∫–∞—Ä—Ç–∞'}`);

      // –í–∏–∫–æ–Ω—É—î–º–æ reverse geocoding –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–¥—Ä–µ—Å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
      if (finalLatitude && finalLongitude) {
        logger.info('üîÑ –í–∏–∫–æ–Ω–∞–Ω–Ω—è reverse geocoding...');
        try {
          const geocodedInfo = await reverseGeocode(finalLatitude, finalLongitude);
          logger.info('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç reverse geocoding:', JSON.stringify(geocodedInfo, null, 2));
          
          // –î–æ–ø–æ–≤–Ω—é—î–º–æ location –≥–µ–æ–∫–æ–¥–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏, —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ
          location = location || {};
          location.country = location.country || geocodedInfo.country || '';
          location.region = location.region || geocodedInfo.region || '';
          location.district = location.district || geocodedInfo.district || '';
          
          // –Ø–∫—â–æ settlement –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ city –∞–±–æ settlement –∑ geocoding
          if (!location.settlement) {
            location.settlement = geocodedInfo.settlement || geocodedInfo.city || '';
          }
          
          // –Ø–∫—â–æ displayName –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑ OSM, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑ geocoding
          if (!location.displayName && geocodedInfo.displayName) {
            location.displayName = geocodedInfo.displayName;
          }
          
          logger.info(`üìç –§–Ü–ù–ê–õ–¨–ù–ê –õ–û–ö–ê–¶–Ü–Ø:`, {
            country: location.country,
            region: location.region,
            district: location.district,
            settlement: location.settlement,
            coordinates: `(${finalLatitude}, ${finalLongitude})`,
            source: useUserGeolocation ? 'user_geolocation' : 'map_selection'
          });
        } catch (error) {
          logger.warn('‚ùå –ü–æ–º–∏–ª–∫–∞ reverse geocoding:', error);
        }
      } else {
        logger.warn('‚ùó –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, reverse geocoding –ø—Ä–æ–ø—É—â–µ–Ω–æ');
      }

      // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —á–∏—Å–ª–æ–≤—ñ –ø–æ–ª—è location –Ω–∞ —á–∏—Å–ª–∞
      if (location) {
        if (location.countryId) location.countryId = Number(location.countryId);
        if (location.latitude !== undefined)
          location.latitude = Number(location.latitude);
        if (location.longitude !== undefined)
          location.longitude = Number(location.longitude);
        if (location.osmId !== undefined)
          location.osmId = Number(location.osmId);
        if (location.placeId !== undefined)
          location.placeId = Number(location.placeId);
      }

      // –Ø–∫—â–æ location –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–∫—Ä–µ–º–æ, —Ñ–æ—Ä–º—É—î–º–æ –∑ –ø–ª–æ—Å–∫–∏—Ö –ø–æ–ª—ñ–≤ (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
      if (!location) {
        const {
          countryId,
          settlement,
          latitude,
          longitude,
          region,
          district,
          ...restFields
        } = rest;

        if (countryId || settlement) {
          location = {
            countryId: countryId ? Number(countryId) : undefined,
            settlement: settlement || '',
            latitude: latitude ? Number(latitude) : undefined,
            longitude: longitude ? Number(longitude) : undefined,
            region,
            district,
          };
        }
        rest = restFields;
      }

      const listingData: any = {
        ...rest,
        images,
        ...(location ? { location } : {}),
      };

      // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–ª—è
      delete listingData.mapLocation;
      delete listingData.userGeolocation;

      logger.info('üîß –î–ê–ù–Ü –î–õ–Ø –°–¢–í–û–†–ï–ù–ù–Ø –û–ì–û–õ–û–®–ï–ù–ù–Ø:');
      logger.info('listingData:', JSON.stringify(listingData, null, 2));

      // 4. –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
      const validationResult = createListingSchema.safeParse(listingData);
      if (!validationResult.success) {
        logger.warn(
          '–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö:',
          JSON.stringify(validationResult.error.errors)
        );
        res.status(400).json({
          status: 'error',
          message: '–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
          errors: validationResult.error.format(),
        });
        return;
      }

      // 5. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
      try {
        // –í–∏—Ç—è–≥—É—î–º–æ motorizedSpec, —è–∫—â–æ —î (–¥–ª—è –º–æ—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π)
        const { motorizedSpec, ...listingFields } =
          'motorizedSpec' in validationResult.data
            ? (validationResult.data as any)
            : { ...validationResult.data };

        const { listing } = await listingService.createListing({
          ...listingFields,
          userId,
          ...(motorizedSpec ? { motorizedSpec } : {}),
        });

        logger.info(`‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ ID ${listing.id} —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ`);
        logger.info('–°—Ç–≤–æ—Ä–µ–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:', JSON.stringify({
          id: listing.id,
          title: listing.title,
          locationId: listing.locationId,
          createdAt: listing.createdAt
        }, null, 2));
        
        res.status(201).json({
          status: 'success',
          message: '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ',
          data: {
            id: listing.id,
            title: listing.title,
            createdAt: listing.createdAt,
          },
        });
        
        logger.info('=== –°–¢–í–û–†–ï–ù–ù–Ø –û–ì–û–õ–û–®–ï–ù–ù–Ø –ó–ê–í–ï–†–®–ï–ù–û ===');
      } catch (error: any) {
        logger.error(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: ${error.message}`);
        res.status(500).json({
          status: 'error',
          message: '–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
          details: error.message,
        });
      }
    } catch (error: any) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: ${error.message}`);
      res.status(500).json({
        status: 'error',
        message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
        details: error.message,
      });
    }
  },

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
   */
  async updateListing(req: Request, res: Response): Promise<void> {
    try {
      logger.info(`–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ ID: ${req.params.id}`);

      // 1. –ü–∞—Ä—Å–∏–º–æ ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
      const listingId = parseInt(req.params.id);
      if (isNaN(listingId)) {
        logger.warn('–ù–µ–¥—ñ–π—Å–Ω–∏–π ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è');
        res.status(400).json({
          status: 'error',
          message: '–ù–µ–¥—ñ–π—Å–Ω–∏–π ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
        });
        return;
      }

      // 2. –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ JWT —Ç–æ–∫–µ–Ω–∞
      const userId = req.userId ?? (req as any).user?.id;
      if (!userId) {
        logger.warn('–°–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó');
        res.status(401).json({
          status: 'error',
          message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π',
        });
        return;
      }

      // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è —Ç–∞ –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
      const isOwner = await listingService.isListingOwner(listingId, userId);
      if (!isOwner) {
        logger.warn(
          `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —á—É–∂–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ${listingId}`
        );
        res.status(403).json({
          status: 'error',
          message: '–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—å–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
        });
        return;
      }

      // 4. –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      const uploadedFiles = req.files as Express.Multer.File[];
      logger.info(`–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ ${uploadedFiles?.length || 0} –Ω–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å`);

      // 5. –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
      const existingListing = await prisma.listing.findUnique({
        where: { id: listingId },
        select: { images: true },
      });

      if (!existingListing) {
        logger.warn(`–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ ID ${listingId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
        res.status(404).json({
          status: 'error',
          message: '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
        });
        return;
      }

      // 6. –í–∏–∑–Ω–∞—á–∞—î–º–æ —è–∫—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–≥—Ç–∏
      let updatedImages = [...(existingListing?.images || [])];

      // 7. –Ø–∫—â–æ –ø—Ä–∏–π—à–ª–∏ –Ω–æ–≤—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –¥–æ–¥–∞—î–º–æ —ó—Ö
      if (uploadedFiles && uploadedFiles.length > 0) {
        const newImages = uploadedFiles.map((file) =>
          getImageUrl(file.filename)
        );
        updatedImages = [...updatedImages, ...newImages];
        logger.info(`–î–æ–¥–∞–Ω–æ ${newImages.length} –Ω–æ–≤–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å`);
      }

      // 8. –Ø–∫—â–æ –≤ –∑–∞–ø–∏—Ç—ñ —î –ø–æ–ª–µ imagesToRemove, –≤–∏–¥–∞–ª—è—î–º–æ —ó—Ö
      if (req.body.imagesToRemove) {
        const imagesToRemove = Array.isArray(req.body.imagesToRemove)
          ? req.body.imagesToRemove
          : [req.body.imagesToRemove];

        logger.info(`–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è ${imagesToRemove.length} –∑–æ–±—Ä–∞–∂–µ–Ω—å`);

        // –í–∏–¥–∞–ª—è—î–º–æ –∑–∞–∑–Ω–∞—á–µ–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        await imageService.deleteImages(imagesToRemove);

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –∑–æ–±—Ä–∞–∂–µ–Ω—å
        updatedImages = updatedImages.filter(
          (img) => !imagesToRemove.includes(img)
        );
        logger.info(
          `–ó–∞–ª–∏—à–∏–ª–æ—Å—å ${updatedImages.length} –∑–æ–±—Ä–∞–∂–µ–Ω—å –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è`
        );
      }

      // --- –û–±—Ä–æ–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó —Ç–∞ –ª–æ–∫–∞—Ü—ñ—ó —Ç–æ–≤–∞—Ä—É –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ ---
      let { location, mapLocation, userGeolocation, ...rest } = req.body;
      
      // –ü–∞—Ä—Å–∏–º–æ location, —è–∫—â–æ –≤—ñ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —è–∫ —Ä—è–¥–æ–∫
      if (typeof location === 'string') {
        try {
          location = JSON.parse(location);
        } catch (e) {
          logger.warn('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç location');
          location = undefined;
        }
      }

      // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –¥–ª—è —Ç–æ–≤–∞—Ä—É –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ:
      // 1. –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ –∫–∞—Ä—Ç–∏ (—è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±—Ä–∞–≤ –Ω–æ–≤–µ –º—ñ—Å—Ü–µ –Ω–∞ –∫–∞—Ä—Ç—ñ)
      // 2. –Ø–∫—â–æ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –º—ñ—Å—Ü–µ –Ω–∞ –∫–∞—Ä—Ç—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      let finalLatitude: number | undefined;
      let finalLongitude: number | undefined;
      let useUserGeolocation = false;

      // –Ø–∫—â–æ —î –¥–∞–Ω—ñ –∑ –∫–∞—Ä—Ç–∏ OpenStreetMap - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—Ö
      if (mapLocation) {
        try {
          const mapLocationData =
            typeof mapLocation === 'string'
              ? JSON.parse(mapLocation)
              : mapLocation;

          if (mapLocationData.lat && mapLocationData.lon) {
            finalLatitude = Number(mapLocationData.lat);
            finalLongitude = Number(mapLocationData.lon);
            
            // –°—Ç–≤–æ—Ä—é—î–º–æ –∞–±–æ –¥–æ–ø–æ–≤–Ω—é—î–º–æ –ª–æ–∫–∞—Ü—ñ—é –¥–∞–Ω–∏–º–∏ –∑ OSM
            location = location || {};
            location.settlement =
              mapLocationData.name ||
              (mapLocationData.display_name &&
                mapLocationData.display_name.split(',')[0]) ||
              location.settlement ||
              '';

            location.latitude = finalLatitude;
            location.longitude = finalLongitude;

            // –î–æ–¥–∞—î–º–æ OSM —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø–æ–ª—è
            location.osmId = mapLocationData.osm_id
              ? Number(mapLocationData.osm_id)
              : undefined;
            location.osmType = mapLocationData.osm_type;
            location.placeId = mapLocationData.place_id
              ? Number(mapLocationData.place_id)
              : undefined;
            location.displayName = mapLocationData.display_name;
            location.addressType = mapLocationData.addresstype;

            // –î–æ–¥–∞—î–º–æ boundingBox —è–∫ –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤
            if (
              mapLocationData.boundingbox &&
              Array.isArray(mapLocationData.boundingbox)
            ) {
              location.boundingBox = mapLocationData.boundingbox;
            }

            // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤–Ω—ñ –¥–∞–Ω—ñ OSM
            location.osmJsonData = mapLocationData;

            // –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–≥—ñ–æ–Ω —ñ —Ä–∞–π–æ–Ω –∑ –∞–¥—Ä–µ—Å–∏ OSM
            if (mapLocationData.address) {
              location.region = mapLocationData.address.state || location.region || '';
              location.district =
                mapLocationData.address.district ||
                mapLocationData.address.county ||
                location.district ||
                '';
            }

            logger.info('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –Ω–æ–≤—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ –∫–∞—Ä—Ç–∏ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É');
          }
        } catch (e) {
          logger.warn('–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö –∑ –∫–∞—Ä—Ç–∏ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ:', e);
        }
      }

      // –Ø–∫—â–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ —â–µ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ —ñ —î –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó
      if (!finalLatitude && !finalLongitude && userGeolocation && 
          userGeolocation.latitude && userGeolocation.longitude) {
        finalLatitude = parseFloat(userGeolocation.latitude);
        finalLongitude = parseFloat(userGeolocation.longitude);
        useUserGeolocation = true;
        
        // –Ø–∫—â–æ location –Ω–µ –±—É–ª–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ —Ä–∞–Ω—ñ—à–µ, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ –∑ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        if (!location) {
          location = {};
        }
        location.latitude = finalLatitude;
        location.longitude = finalLongitude;
        
        logger.info('–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É');
      }

      // –í–∏–∫–æ–Ω—É—î–º–æ reverse geocoding –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      if (finalLatitude && finalLongitude) {
        try {
          const geocodedInfo = await reverseGeocode(finalLatitude, finalLongitude);
          
          // –î–æ–ø–æ–≤–Ω—é—î–º–æ location –≥–µ–æ–∫–æ–¥–æ–≤–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏, —è–∫—â–æ –≤–æ–Ω–∏ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ
          location = location || {};
          location.country = location.country || geocodedInfo.country || '';
          location.region = location.region || geocodedInfo.region || '';
          location.district = location.district || geocodedInfo.district || '';
          
          // –Ø–∫—â–æ settlement –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ settlement –∑ geocoding
          if (!location.settlement) {
            location.settlement = geocodedInfo.settlement || geocodedInfo.city || '';
          }
          
          // –Ø–∫—â–æ displayName –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑ OSM, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑ geocoding
          if (!location.displayName && geocodedInfo.displayName) {
            location.displayName = geocodedInfo.displayName;
          }
          
          logger.info(`–í–∏–∫–æ–Ω–∞–Ω–æ reverse geocoding –¥–ª—è –Ω–æ–≤–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (${finalLatitude}, ${finalLongitude}):`, {
            country: location.country,
            region: location.region,
            district: location.district,
            settlement: location.settlement,
            source: useUserGeolocation ? 'user_geolocation' : 'map_selection'
          });
        } catch (error) {
          logger.warn('–ü–æ–º–∏–ª–∫–∞ reverse geocoding –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ:', error);
        }
      }

      // –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —á–∏—Å–ª–æ–≤—ñ –ø–æ–ª—è location –Ω–∞ —á–∏—Å–ª–∞
      if (location) {
        if (location.countryId) location.countryId = Number(location.countryId);
        if (location.latitude !== undefined)
          location.latitude = Number(location.latitude);
        if (location.longitude !== undefined)
          location.longitude = Number(location.longitude);
        if (location.osmId !== undefined)
          location.osmId = Number(location.osmId);
        if (location.placeId !== undefined)
          location.placeId = Number(location.placeId);
      }

      // –Ø–∫—â–æ location –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ–∫—Ä–µ–º–æ, —Ñ–æ—Ä–º—É—î–º–æ –∑ –ø–ª–æ—Å–∫–∏—Ö –ø–æ–ª—ñ–≤ (–¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
      if (!location) {
        const {
          countryId,
          settlement,
          latitude,
          longitude,
          region,
          district,
          ...restFields
        } = rest;

        if (countryId || settlement || latitude || longitude) {
          location = {
            countryId: countryId ? Number(countryId) : undefined,
            settlement: settlement || '',
            latitude: latitude ? Number(latitude) : undefined,
            longitude: longitude ? Number(longitude) : undefined,
            region,
            district,
          };
        }
        rest = restFields;
      }

      const updateData: any = {
        ...rest,
        images: updatedImages,
        ...(location ? { location } : {}),
      };

      // –í–∏–¥–∞–ª—è—î–º–æ —Å–ª—É–∂–±–æ–≤—ñ –ø–æ–ª—è
      delete updateData.imagesToRemove;
      delete updateData.mapLocation;
      delete updateData.userGeolocation;

      // 10. –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
      const validationResult = updateListingSchema.safeParse(updateData);
      if (!validationResult.success) {
        logger.warn(
          '–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –¥–∞–Ω–∏—Ö:',
          JSON.stringify(validationResult.error.errors)
        );
        res.status(400).json({
          status: 'error',
          message: '–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó',
          errors: validationResult.error.format(),
        });
        return;
      }

      // 11. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
      try {
        // –í–∏—Ç—è–≥—É—î–º–æ motorizedSpec, —è–∫—â–æ —î (–¥–ª—è –º–æ—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π)
        let listingFields = { ...validationResult.data };
        let motorizedSpec;
        if ('motorizedSpec' in validationResult.data) {
          // @ts-ignore
          motorizedSpec = validationResult.data.motorizedSpec;
          // @ts-ignore
          delete listingFields.motorizedSpec;
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ motorizedSpec –º–∞—î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–æ–ª—è –∞–±–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—î–º–æ –π–æ–≥–æ –≤–∑–∞–≥–∞–ª—ñ
        const updatePayload = {
          ...listingFields,
          ...(motorizedSpec &&
          typeof motorizedSpec === 'object' &&
          Object.keys(motorizedSpec).length > 0 &&
          'model' in motorizedSpec &&
          'year' in motorizedSpec
            ? {
                motorizedSpec: {
                  ...motorizedSpec,
                  model: String(motorizedSpec.model), // Ensure model is a string
                  year: Number(motorizedSpec.year), // Ensure year is a number
                  listingId, // Add listingId to satisfy type requirements
                },
              }
            : {}),
        };

        const { listing } = await listingService.updateListing(
          listingId,
          updatePayload
        );

        logger.info(`–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ ID ${listingId} —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ`);
        res.status(200).json({
          status: 'success',
          message: '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ',
          data: {
            id: listing.id,
            title: listing.title,
            updatedAt: listing.updatedAt,
            images: listing.images,
          },
        });
      } catch (updateError: any) {
        logger.error(
          `–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: ${updateError.message}`
        );
        res.status(400).json({
          status: 'error',
          message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
          details: updateError.message,
        });
      }
    } catch (error: any) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: ${error.message}`);
      res.status(500).json({
        status: 'error',
        message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
        details: error.message,
      });
    }
  },

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å –∑ —Ñ—ñ–ª—å—Ç—Ä–∞–º–∏
   */
  async getListings(req: Request, res: Response): Promise<void> {
    try {
      logger.info('–ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å');

      // 1. –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞–ø–∏—Ç—É
      const queryValidation = listingQuerySchema.safeParse(req.query);
      if (!queryValidation.success) {
        logger.warn(
          '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É:',
          JSON.stringify(queryValidation.error.errors)
        );
        res.status(400).json({
          status: 'error',
          message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É',
          errors: queryValidation.error.format(),
        });
        return;
      }

      // 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
      const currentUserId = req.userId ?? (req as any).user?.id;

      // 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å
      const filters = queryValidation.data;
      const result = (await listingService.getListings(
        filters,
        currentUserId
      )) as {
        listings: any[];
        pagination: {
          total: number;
          page: number;
          limit: number;
        };
      };

      // 4. –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      logger.info(
        `–û—Ç—Ä–∏–º–∞–Ω–æ ${result.listings.length} –æ–≥–æ–ª–æ—à–µ–Ω—å –∑ ${result.pagination.total} –∑–∞–≥–∞–ª—å–Ω–∏—Ö`
      );
      res.status(200).json({
        status: 'success',
        data: result,
      });
    } catch (error: any) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å: ${error.message}`);
      res.status(500).json({
        status: 'error',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –æ–≥–æ–ª–æ—à–µ–Ω—å',
        details: error.message,
      });
    }
  },

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
   */
  async getListing(req: Request, res: Response): Promise<void> {
    try {
      logger.info('–ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è');

      // 1. –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ID
      const paramsValidation = listingIdParamSchema.safeParse(req.params);
      if (!paramsValidation.success) {
        logger.warn(
          '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:',
          JSON.stringify(paramsValidation.error.errors)
        );
        res.status(400).json({
          status: 'error',
          message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
          errors: paramsValidation.error.format(),
        });
        return;
      }

      const { id } = paramsValidation.data;

      // 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è ID –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
      const currentUserId = req.userId ?? (req as any).user?.id;

      // 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
      const result = await listingService.getListing(id, currentUserId);

      // 4. –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      logger.info(`–û—Ç—Ä–∏–º–∞–Ω–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ ID ${id}`);
      res.status(200).json({
        status: 'success',
        data: result,
      });
    } catch (error: any) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: ${error.message}`);

      if (error.message.includes('–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')) {
        res.status(404).json({
          status: 'error',
          message: '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
        });
      } else {
        res.status(500).json({
          status: 'error',
          message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
          details: error.message,
        });
      }
    }
  },

  /**
   * –í–∏–¥–∞–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
   */
  async deleteListing(req: Request, res: Response): Promise<void> {
    try {
      logger.info('–ó–∞–ø–∏—Ç –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è');

      // 1. –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ID
      const paramsValidation = listingIdParamSchema.safeParse(req.params);
      if (!paramsValidation.success) {
        logger.warn(
          '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:',
          JSON.stringify(paramsValidation.error.errors)
        );
        res.status(400).json({
          status: 'error',
          message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
          errors: paramsValidation.error.format(),
        });
        return;
      }

      const { id } = paramsValidation.data;

      // 2. –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ JWT —Ç–æ–∫–µ–Ω–∞
      const userId = req.userId ?? (req as any).user?.id;
      if (!userId) {
        logger.warn('–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó');
        res.status(401).json({
          status: 'error',
          message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π',
        });
        return;
      }

      // 3. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
      const isOwner = await listingService.isListingOwner(id, userId);
      const isAdmin = (req as any).user?.role === 'ADMIN';

      if (!isOwner && !isAdmin) {
        logger.warn(
          `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${userId} –Ω–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —á—É–∂–µ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è ${id}`
        );
        res.status(403).json({
          status: 'error',
          message: '–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ü—å–æ–≥–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
        });
        return;
      }

      // 4. –í–∏–¥–∞–ª—è—î–º–æ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
      await listingService.deleteListing(id);

      // 5. –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      logger.info(`–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ ID ${id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ`);
      res.status(200).json({
        status: 'success',
        message: '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ',
      });
    } catch (error: any) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è: ${error.message}`);

      if (error.message.includes('–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')) {
        res.status(404).json({
          status: 'error',
          message: '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
        });
      } else {
        res.status(500).json({
          status: 'error',
          message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
          details: error.message,
        });
      }
    }
  },

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async getUserListings(req: Request, res: Response): Promise<void> {
    try {
      logger.info('–ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');

      // 1. –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ JWT —Ç–æ–∫–µ–Ω–∞
      const userId = req.userId ?? (req as any).user?.id;
      if (!userId) {
        logger.warn('–°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å –±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó');
        res.status(401).json({
          status: 'error',
          message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π',
        });
        return;
      }

      // 2. –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –∑–∞–ø–∏—Ç—É
      const queryValidation = listingQuerySchema.safeParse(req.query);
      if (!queryValidation.success) {
        logger.warn(
          '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É:',
          JSON.stringify(queryValidation.error.errors)
        );
        res.status(400).json({
          status: 'error',
          message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É',
          errors: queryValidation.error.format(),
        });
        return;
      }

      // 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–≥–æ–ª–æ—à–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const filters = {
        ...queryValidation.data,
        userId,
      };

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫ currentUserId –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
      const result = (await listingService.getListings(filters, userId)) as {
        listings: any[];
        pagination: {
          total: number;
          page: number;
          limit: number;
        };
      };

      // 4. –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      logger.info(
        `–û—Ç—Ä–∏–º–∞–Ω–æ ${result.listings.length} –æ–≥–æ–ª–æ—à–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ${result.pagination.total} –∑–∞–≥–∞–ª—å–Ω–∏—Ö`
      );
      res.status(200).json({
        status: 'success',
        data: result,
      });
    } catch (error: any) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${error.message}`);
      res.status(500).json({
        status: 'error',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
        details: error.message,
      });
    }
  },

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ –æ–±—Ä–∞–Ω–∏—Ö
   */
  async toggleFavorite(req: Request, res: Response): Promise<void> {
    try {
      // 1. –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ ID
      const paramsValidation = listingIdParamSchema.safeParse(req.params);
      if (!paramsValidation.success) {
        logger.warn(
          '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:',
          JSON.stringify(paramsValidation.error.errors)
        );
        res.status(400).json({
          status: 'error',
          message: '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
          errors: paramsValidation.error.format(),
        });
        return;
      }

      const { id } = paramsValidation.data;

      // 2. –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ JWT —Ç–æ–∫–µ–Ω–∞
      const userId = req.userId ?? (req as any).user?.id;
      if (!userId) {
        logger.warn('–°–ø—Ä–æ–±–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –æ–±—Ä–∞–Ω—ñ –±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó');
        res.status(401).json({
          status: 'error',
          message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π',
        });
        return;
      }

      // 3. –î–æ–¥–∞–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–∞–Ω–∏—Ö
      const result = await listingService.toggleFavorite(id, userId);

      // 4. –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      const action = result.isFavorite ? '–¥–æ–¥–∞–Ω–æ –¥–æ' : '–≤–∏–¥–∞–ª–µ–Ω–æ –∑';
      logger.info(
        `–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –∑ ID ${id} ${action} –æ–±—Ä–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}`
      );

      res.status(200).json({
        status: 'success',
        message: `–û–≥–æ–ª–æ—à–µ–Ω–Ω—è ${action} –æ–±—Ä–∞–Ω–∏—Ö`,
        data: result,
      });
    } catch (error: any) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ –æ–±—Ä–∞–Ω–∏–º–∏: ${error.message}`);

      if (error.message.includes('–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ')) {
        res.status(404).json({
          status: 'error',
          message: '–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
        });
      } else {
        res.status(500).json({
          status: 'error',
          message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–Ω–æ–≥–æ',
          details: error.message,
        });
      }
    }
  },

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
   */
  async getFavorites(req: Request, res: Response): Promise<void> {
    try {
      logger.info('–ó–∞–ø–∏—Ç –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å');

      // 1. –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ JWT —Ç–æ–∫–µ–Ω–∞
      const userId = req.userId ?? (req as any).user?.id;
      if (!userId) {
        logger.warn('–°–ø—Ä–æ–±–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –±–µ–∑ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó');
        res.status(401).json({
          status: 'error',
          message: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π',
        });
        return;
      }

      // 2. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—ó
      const page = parseInt(req.query.page as string) || 1;
      const limit = parseInt(req.query.limit as string) || 20;

      // 3. –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å
      const result = await listingService.getFavorites(userId, page, limit);

      // 4. –£—Å–ø—ñ—à–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
      logger.info(
        `–û—Ç—Ä–∏–º–∞–Ω–æ ${result.listings.length} –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å –∑ ${result.pagination.total} –∑–∞–≥–∞–ª—å–Ω–∏—Ö`
      );

      res.status(200).json({
        status: 'success',
        data: result,
      });
    } catch (error: any) {
      logger.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å: ${error.message}`);
      res.status(500).json({
        status: 'error',
        message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ–±—Ä–∞–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è',
        details: error.message,
      });
    }
  },
};

