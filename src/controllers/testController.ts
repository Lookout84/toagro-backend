import { Request, Response } from 'express';
import { logger } from '../utils/logger';

export const testController = {
  /**
   * –¢–µ—Å—Ç–æ–≤–∏–π endpoint –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
   */
  async testGeolocation(req: Request, res: Response): Promise<void> {
    try {
      logger.info('üß™ TEST GEOLOCATION ENDPOINT');
      logger.info('–û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:');
      logger.info('- Body:', JSON.stringify(req.body, null, 2));
      logger.info('- Query:', JSON.stringify(req.query, null, 2));
      logger.info('- Headers:', JSON.stringify(req.headers, null, 2));
      
      if (req.files) {
        logger.info('- Files:', (req.files as Express.Multer.File[]).map(f => ({
          fieldname: f.fieldname,
          originalname: f.originalname,
          size: f.size
        })));
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≥–µ–æ–ª–æ–∫–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ
      const { userGeolocation, mapLocation, location } = req.body;
      
      if (userGeolocation) {
        logger.info('‚úÖ UserGeolocation –æ—Ç—Ä–∏–º–∞–Ω–æ:', userGeolocation);
      }
      
      if (mapLocation) {
        logger.info('‚úÖ MapLocation –æ—Ç—Ä–∏–º–∞–Ω–æ:', mapLocation);
      }
      
      if (location) {
        logger.info('‚úÖ Location –æ—Ç—Ä–∏–º–∞–Ω–æ:', location);
      }

      res.json({
        status: 'success',
        message: '–î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–∞ –∑–∞–ª–æ–≥–æ–≤–∞–Ω–æ',
        received: {
          body: req.body,
          query: req.query,
          hasFiles: !!(req.files && (req.files as Express.Multer.File[]).length > 0),
          filesCount: req.files ? (req.files as Express.Multer.File[]).length : 0
        }
      });
    } catch (error: any) {
      logger.error('–ü–æ–º–∏–ª–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º—É endpoint:', error);
      res.status(500).json({
        status: 'error',
        message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        details: error.message
      });
    }
  }
};
