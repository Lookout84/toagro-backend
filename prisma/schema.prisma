generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель для сповіщень
model Notification {
  id          Int                  @id @default(autoincrement())
  userId      Int
  type        NotificationType
  subject     String?
  content     String
  attachments Json?
  read        Boolean              @default(false)
  readAt      DateTime?
  priority    NotificationPriority @default(NORMAL)
  metadata    Json?
  linkUrl     String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  user        User                 @relation(fields: [userId], references: [id])
}

// Модель для шаблонів сповіщень
model NotificationTemplate {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  type        NotificationType
  subject     String?
  content     String
  variables   String[]
  active      Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  createdById Int
  createdBy   User             @relation(fields: [createdById], references: [id])
}

// Модель для налаштувань сповіщень користувачів
model NotificationSetting {
  id                     Int      @id @default(autoincrement())
  userId                 Int      @unique
  emailEnabled           Boolean  @default(true)
  smsEnabled             Boolean  @default(false)
  pushEnabled            Boolean  @default(true)
  newsletterSubscribed   Boolean  @default(true)
  marketingSubscribed    Boolean  @default(false)
  newListingNotification Boolean  @default(true)
  newMessageNotification Boolean  @default(true)
  paymentNotification    Boolean  @default(true)
  systemNotification     Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  user                   User     @relation(fields: [userId], references: [id])
}

// Модель для токенів пристроїв (Push-сповіщення)
model DeviceToken {
  id         Int      @id @default(autoincrement())
  userId     Int
  token      String   @unique
  deviceType String // "android", "ios", "web"
  name       String?
  lastUsed   DateTime @default(now())
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

// Модель для планових завдань
model ScheduledTask {
  id            String              @id
  type          String
  data          Json
  scheduledFor  DateTime
  status        ScheduledTaskStatus @default(PENDING)
  attempts      Int                 @default(0)
  maxAttempts   Int                 @default(3)
  lastAttemptAt DateTime?
  completedAt   DateTime?
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  createdById   Int?
  createdBy     User?               @relation(fields: [createdById], references: [id])
}

// Модель для регулярних завдань
model RecurringTask {
  id          String              @id
  type        String
  data        Json
  schedule    String // Cron-вираз
  status      ScheduledTaskStatus @default(ACTIVE)
  lastRunAt   DateTime?
  nextRunAt   DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  createdById Int?
  createdBy   User?               @relation(fields: [createdById], references: [id])
}

// Модель для масових розсилок
model BulkNotification {
  id           String                 @id
  type         NotificationType
  subject      String?
  content      String
  userFilter   Json?
  templateName String?
  totalSent    Int                    @default(0)
  totalFailed  Int                    @default(0)
  status       BulkNotificationStatus @default(PENDING)
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  createdById  Int
  createdBy    User                   @relation(fields: [createdById], references: [id])
  senderId     Int?
  sender       User?                  @relation("SenderNotifications", fields: [senderId], references: [id])
  campaignId   Int?
  campaign     Campaign?              @relation(fields: [campaignId], references: [id])
  priority     String?                @default("NORMAL")
}

model Campaign {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  type              CampaignType
  status            CampaignStatus     @default(DRAFT)
  startDate         DateTime?
  endDate           DateTime?
  targetAudience    Json?
  goal              String?
  budget            Float?
  performance       Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  createdById       Int
  createdBy         User               @relation(fields: [createdById], references: [id])
  bulkNotifications BulkNotification[]
}

model User {
  id                  Int                    @id @default(autoincrement())
  email               String                 @unique
  passwordHash        String
  name                String
  phoneNumber         String?                @unique
  role                UserRole               @default(USER)
  avatar              String?
  isVerified          Boolean                @default(false)
  verificationToken   String?
  resetToken          String?
  lastLoginAt         DateTime?
  resetTokenExpiry    DateTime?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  listings            Listing[]
  sentMessages        Message[]              @relation("SentMessages")
  receivedMessages    Message[]              @relation("ReceivedMessages")
  payments            Payment[]
  notifications       Notification[]
  notificationSetting NotificationSetting?
  deviceTokens        DeviceToken[]
  createdTemplates    NotificationTemplate[]
  scheduledTasks      ScheduledTask[]
  recurringTasks      RecurringTask[]
  bulkNotifications   BulkNotification[]     @relation()
  sentNotifications   BulkNotification[]     @relation("SenderNotifications")
  createdCampaigns    Campaign[]
  UserActivity        UserActivity[]
  favorites           Favorite[]
  companyProfile      CompanyProfile?
  reports             Report[]
}

enum UserRole {
  USER
  COMPANY
  ADMIN
  MODERATOR
}

model CompanyProfile {
  id          Int          @id @default(autoincrement())
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id])
  companyName String
  companyCode String       @unique // ЄДРПОУ або інший код компанії
  vatNumber   String?      @unique // ІПН
  website     String?
  industry    String?
  foundedYear Int?
  size        CompanySize? @default(SMALL)
  description String?      @db.Text
  logoUrl     String?

  // Адреса як JSON
  address Json?

  // Контактна інформація як JSON
  contactInfo Json?

  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Документи для верифікації
  documents CompanyDocument[]

  // Додайте зв'язок з CompanyAddress
  companyAddress CompanyAddress?
}

enum CompanySize {
  SMALL
  MEDIUM
  LARGE
}

model CompanyDocument {
  id           Int            @id @default(autoincrement())
  companyId    Int
  company      CompanyProfile @relation(fields: [companyId], references: [id])
  name         String
  type         String // certificate, license, registration, etc.
  fileUrl      String
  isVerified   Boolean        @default(false)
  status       String // pending, approved, rejected
  verifiedAt   DateTime?
  verifiedById Int?
  uploadedAt   DateTime       @default(now())
  expiresAt    DateTime?
}

model CompanyAddress {
  id         Int            @id @default(autoincrement())
  companyId  Int            @unique
  company    CompanyProfile @relation(fields: [companyId], references: [id])
  country    String
  region     String?
  city       String
  street     String?
  postalCode String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model UserActivity {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  action       String
  resourceId   Int
  resourceType String
  metadata     Json?
  createdAt    DateTime @default(now())
}

model Favorite {
  id        Int      @id @default(autoincrement())
  userId    Int
  listingId Int
  createdAt DateTime @default(now())

  // Зв'язки з іншими моделями
  user    User    @relation(fields: [userId], references: [id])
  listing Listing @relation(fields: [listingId], references: [id])

  // Унікальний індекс щоб користувач міг додати оголошення в обрані лише один раз
  @@unique([userId, listingId])
}

model Listing {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  price         Float
  priceType     PriceType      @default(NETTO) // нове поле
  vatIncluded   Boolean        @default(false) // чи включено ПДВ
  currency      Currency       @default(UAH)
  location      Location?      @relation(fields: [locationId], references: [id])
  locationId    Int?
  category      String
  categoryId    Int?
  userId        Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  active        Boolean        @default(true)
  images        String[]
  views         Int            @default(0)
  condition     ItemCondition  @default(used)
  brandId       Int?
  brand         Brand?         @relation(fields: [brandId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  categoryRel   Category?      @relation(fields: [categoryId], references: [id])
  motorizedSpec MotorizedSpec?
  favorites     Favorite[]
  reports       Report[]
}

// --- НОВІ МОДЕЛІ ДЛЯ РЕГІОНІВ ТА ГРОМАД ---
model Country {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  code      String     @unique // Наприклад: "UA", "PL"
  latitude  Float? // Центр країни: широта
  longitude Float? // Центр країни: довгота
  locations Location[]
}

// model Country {
//   id        Int        @id @default(autoincrement())
//   name      String     @unique
//   code      String     @unique // Наприклад: "UA", "PL"
//   latitude  Float? // Центр країни: широта
//   longitude Float? // Центр країни: довгота
//   regions   Region[]
//   locations Location[]
// }

// model Region {
//   id          Int         @id @default(autoincrement())
//   name        String      @unique
//   code        String?     @unique
//   countryId   Int
//   country     Country     @relation(fields: [countryId], references: [id])
//   communities Community[]
//   locations   Location[]
// }

// model Community {
//   id        Int        @id @default(autoincrement())
//   name      String // Наприклад: "Бучанська громада"
//   regionId  Int
//   region    Region     @relation(fields: [regionId], references: [id])
//   locations Location[]

//   @@unique([regionId, name])
// }

// Спрощена модель Location без зв'язків з Region та Community
model Location {
  id          Int        @id @default(autoincrement())
  countryId   Int?
  country     String?
  region      String?
  district    String?
  settlement  String
  latitude    Float? // Координати для карти
  longitude   Float?
  // Нові поля для даних OpenStreetMap
  osmId       Int?      // osm_id: 12353510
  osmType     String?   // osm_type: "relation"
  placeId     Int?      // place_id: 405611405
  displayName String?   // display_name
  addressType String?   // addresstype: "municipality"
  boundingBox String[]  // boundingbox: ["48.3078815", "48.5082727", "27.6556703", "28.1038170"]
  osmJsonData Json?     // Для збереження всіх даних геокодера
  listings    Listing[]
  Country     Country?  @relation(fields: [countryId], references: [id])
}



// model Location {
//   id          Int        @id @default(autoincrement())
//   countryId   Int
//   country     Country    @relation(fields: [countryId], references: [id])
//   regionId    Int
//   region      Region     @relation(fields: [regionId], references: [id])
//   communityId Int?
//   community   Community? @relation(fields: [communityId], references: [id])
//   settlement  String
//   latitude    Float? // Координати для карти
//   longitude   Float?
//   listings    Listing[]
// }

// --- КІНЕЦЬ НОВИХ МОДЕЛЕЙ ---

model Brand {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?
  logo        String?
  active      Boolean   @default(true)
  popular     Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  listings    Listing[]
}

model Message {
  id         Int       @id @default(autoincrement())
  content    String
  senderId   Int
  receiverId Int
  listingId  Int?
  createdAt  DateTime  @default(now())
  readAt     DateTime?
  sender     User      @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User      @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Payment {
  id            Int           @id @default(autoincrement())
  userId        Int
  amount        Float
  currency      String        @default("UAH")
  status        PaymentStatus
  transactionId String        @unique
  orderId       String?
  paymentMethod String?
  createdAt     DateTime      @default(now())
  completedAt   DateTime?
  user          User          @relation(fields: [userId], references: [id])
}

model Category {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  slug        String     @unique
  description String?
  image       String?
  parentId    Int?
  active      Boolean    @default(true)
  favorite    Boolean    @default(false)
  isMotorized Boolean    @default(false) // чи є категорія моторизованою технікою
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  listings    Listing[]
}

enum PriceType {
  NETTO // без ПДВ
  BRUTTO // з ПДВ
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum NotificationType {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
}

enum ScheduledTaskStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  ACTIVE
  PAUSED
}

enum BulkNotificationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum CampaignType {
  EMAIL
  SMS
  PUSH
  MIXED
  PROMO
  EVENT
  NEWSLETTER
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ItemCondition {
  new
  used
}

enum Currency {
  UAH
  USD
  EUR
}

// Тип палива
enum FuelType {
  DIESEL
  GASOLINE
  ELECTRIC
  HYBRID
  GAS
}

// Трансмісія
enum TransmissionType {
  MANUAL
  AUTOMATIC
  HYDROSTATIC
  CVT
}

// Основна модель для моторизованої техніки, зв'язок з Listing
model MotorizedSpec {
  id        Int     @id @default(autoincrement())
  listingId Int     @unique
  listing   Listing @relation(fields: [listingId], references: [id])

  // Основна інформація
  model        String // Модель
  year         Int // Рік випуску
  serialNumber String? @unique

  // Технічні характеристики
  enginePower   Float? // Потужність двигуна (к.с.)
  enginePowerKw Float? // Потужність двигуна (кВт)
  engineModel   String? // Модель двигуна
  fuelType      FuelType          @default(DIESEL) // Тип пального
  fuelCapacity  Float? // Об'єм паливного бака (літри)
  transmission  TransmissionType? @default(MANUAL) // Тип трансмісії
  numberOfGears Int? // Кількість передач

  // Розміри та вага
  length          Float? // Довжина (мм)
  width           Float? // Ширина (мм)
  height          Float? // Висота (мм)  
  weight          Float? // Вага (кг)
  wheelbase       Float? // Колісна база (мм)
  groundClearance Float? // Кліренс (мм)

  // Робочі характеристики
  workingWidth Float? // Робоча ширина (мм)
  capacity     Float? // Продуктивність (т/год)
  liftCapacity Float? // Грузопідйомність (кг)
  threePtHitch Boolean @default(false) // Наявність тризв'язки
  pto          Boolean @default(false) // Наявність ВВП (вал відбору потужності) 
  ptoSpeed     String? // Швидкість ВВП (об/хв)

  // Додаткові характеристики для тракторів
  frontAxle         String? // Передній міст (тип)
  rearAxle          String? // Задній міст (тип)
  frontTireSize     String? // Розмір передніх шин
  rearTireSize      String? // Розмір задніх шин
  hydraulicFlow     Float? // Продуктивність гідравлічної системи (л/хв)
  hydraulicPressure Float? // Тиск гідравлічної системи (бар)

  // Додаткові характеристики для комбайнів
  grainTankCapacity Float? // Об'єм бункера (літри)
  headerWidth       Float? // Ширина жатки (мм)
  threshingWidth    Float? // Ширина молотильного барабана (мм)
  cleaningArea      Float? // Площа очистки (м²)

  // Експлуатаційна інформація
  engineHours     Float? // Години роботи двигуна
  mileage         Float? // Пробіг (км)
  lastServiceDate DateTime? // Дата останнього сервісу
  nextServiceDate DateTime? // Дата наступного сервісу
  isOperational   Boolean   @default(true) // Чи в робочому стані

  // Тимчасові мітки
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Report {
  id           Int       @id @default(autoincrement())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  listingId    Int?
  listing      Listing?  @relation(fields: [listingId], references: [id])
  reason       String
  description  String?
  resolvedById Int?
  resolvedAt   DateTime?
  status       String    @default("PENDING") // або enum, якщо потрібно
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

enum ReportStatus {
  PENDING
  RESOLVED
  REJECTED
}
